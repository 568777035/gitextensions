version: 3.1.0.{build}

os: Visual Studio 2017

branches:
  except:
    - configdata
    - gh-pages

environment:
  matrix:
  - IdeVersion: VS2017
  SKIP_PAUSE: TRUE
  ARCHIVE_WITH_PDB: TRUE
  spciuser:
    secure: d/ak/yIuPjpVeWl+gDR0Yl1s8L4AGP+sn46jqGl7EvVZMq0bhzZBFwBCm9JTy0P9

init:
  - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
  # enable MSBuild parallel builds
  parallel: true
  # MSBuild verbosity level
  verbosity: minimal

cache:
  #- packages -> **\packages.config      # preserve "packages" directory in the root of build folder but will reset it if packages.config is modified
  - packages\WiX.3.11.0 -> Setup\packages.config

install:
- cmd: git submodule update --init --recursive
- cmd: echo /logger:"%ProgramFiles%\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll">> Directory.Build.rsp
- cmd: |-
    cd Setup
    C:\\Python35\\python set_version_to.py -v %APPVEYOR_BUILD_VERSION% -t %APPVEYOR_BUILD_VERSION%
    cd ..

# to run your custom scripts instead of automatic MSBuild
build_script:
- ps: |
    Write-Output "Platform: $env:IdeVersion"
    # for release branches mark the repo as clean
    if (!$env:APPVEYOR_PULL_REQUEST_TITLE) {
      & Setup\Mark-RepoClean.ps1
    }
    # build
    & Setup\Build.cmd
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

# to run your custom scripts instead of automatic tests
test: off
#test_script:
#- ps: |
#    $testAssemblies = (Get-ChildItem -Path UnitTests -Filter '*Tests.dll' -Recurse -Exclude 'ApprovalTests.dll').FullName | Where-Object { $_.Contains('\bin\Release') }
#    $packageConfig = [xml](Get-Content .nuget\packages.config)
#    $opencover_version = $packageConfig.SelectSingleNode('/packages/package[@id="OpenCover"]').version
#    $opencover_console = "packages\OpenCover.$opencover_version\tools\OpenCover.Console.exe"
#    &$opencover_console `
#        -register:user `
#        -returntargetcode `
#        -hideskipped:All `
#        -filter:"+[*]* -[FluentAssertions*]* -[SmartFormat*]* -[nunit*]*" `
#        -excludebyattribute:*.ExcludeFromCodeCoverage* `
#        -excludebyfile:*\*Designer.cs `
#        -output:"OpenCover.GitExtensions.xml" `
#        -target:"nunit3-console.exe" `
#        -targetargs:"$testAssemblies"
#    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
#    $codecov_version = $packageConfig.SelectSingleNode('/packages/package[@id="Codecov"]').version
#    $codecov = "packages\Codecov.$codecov_version\tools\codecov.exe"
#    &$codecov -f ".\OpenCover.GitExtensions.xml" --flag production
#    &$codecov -f ".\OpenCover.GitExtensions.xml" --flag tests

# scripts to run after tests
after_test:
- ps: |
    if ($env:ARTIFACT_DEBUG_ENABLED -eq $true) {
      # -------------------------------
      # debugging
      # -------------------------------
      Write-Host "[INFO]: GitStatus.txt is to help find dirty status.  File should say repo and submodules are clean."
      Write-Host "[INFO]: Update the skip-worktree section in this script to fix CI builds."
      & git status > GitStatus.txt
      & git submodule foreach --recursive git status >> GitStatus.txt
      Push-AppveyorArtifact .\GitStatus.txt
      & tree /F /A > tree.txt
      Push-AppveyorArtifact .\tree.txt
    }
    # -------------------------------
    # build artifacts
    # -------------------------------
    & Setup\BuildInstallers.cmd
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    & Setup\Set-Portable.ps1 -IsPortable
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    & Setup\MakePortableArchive.cmd Release $env:APPVEYOR_BUILD_VERSION
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    & Setup\Set-Portable.ps1
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }
    # -------------------------------
    # sign artifacts
    # -------------------------------
    # do sign artifacts for non-release branches
    if ($env:APPVEYOR_PULL_REQUEST_TITLE -eq $true) {
        Write-Host "[INFO]: Do not sign non-release branches"
        Get-ChildItem .\Setup\GitExtensions-Portable-*.zip | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name }
        Exit-AppVeyorBuild
        return
    }
    # continue on with signing
    #& Setup\Sign-Artifacts.ps1
    # get files
    Get-ChildItem -Path . -Filter *.msi -Recurse
    Get-ChildItem -Path . -Filter *.zip -Recurse
    Get-ChildItem -Path . -Filter *.vsix -Recurse
    $msi = (Resolve-Path ./Setup/GitExtensions-*.msi)[0].Path;
    $zip = (Resolve-Path ./Setup/GitExtensions-Portable-*.zip)[0].Path;
    $vsix = (Resolve-Path ./GitExtensionsVSIX/bin/Release/GitExtensionsVSIX.vsix)[0].Path;
    Write-Host "pwd: $(pwd)"
    Write-Host "msi: $msi"
    Write-Host "zip: $zip"
    Write-Host "vsix: $vsix"
    # archive files so we send them all in one go
    $combined = ".\combined.$($env:APPVEYOR_BUILD_VERSION).zip"
    Compress-Archive -LiteralPath $msi, $zip, $vsix -CompressionLevel NoCompression -DestinationPath $combined -Force
    if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode) }

artifacts:
  # upload the generated portable archive only
  - path: 'combined.*.zip'
  - path: 'Setup/GitExtensions-pdbs-*.zip'
    name: GitExtensions-pdbs-*.zip
  - path: 'GitExtensionsVSIX/bin/Release/GitExtensionsVSIX.vsix'
    name: GitExtensionsVSIX.vsix

deploy:
- provider: Webhook
  url: https://app.signpath.io/API/v1/7c19b2cf-90f7-4d15-9b12-1b615f7c18c4/Integrations/AppVeyor?SigningPolicyId=8efd636e-c408-4406-a14a-1d481f6163bf
  on_build_success: true
  on_build_failure: false
  on_build_status_changed: false
  method: POST
  authorization:
     secure: RdmJQ3LAsGIbtqbxlcn7wF8ESTbPSDiR0Fmyt11mDl+avSDd0HKexHA+sWQA3cN1K8aVnKTzvjGTQS8DSDmLzQ==